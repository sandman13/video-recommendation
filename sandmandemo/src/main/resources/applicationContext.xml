<?xml version="1.0" encoding="UTF-8"?>
<!--这边是关联的schema文件,当需要使用相应的标签就需要引入对应的schema文件约束,在xmlns中配置,在schemaLocation配置两个地址,注意第二个地址可以省略版本号,版本号和pom里面的定义一致-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd"
       default-autowire="byName">

    <!--读取数据库的配置文件,之后可以使用占位符的方式-->
    <context:property-placeholder location="classpath:db.properties"/>
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!--初始化连接大小-->
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <!--设置最大活跃连接数-->
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <!--设置最大空闲连接数,一般接近最大活跃连接数,因为超过最大空闲连接数剩余的连接会自动销毁,无法起到数据库连接池的作用-->
        <property name="maxIdle" value="${jdbc.maxIdle}"/>
        <!--设置最小空闲连接数-->
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <!--设置最大超时时间-->
        <property name="maxWait" value="${jdbc.maxWait}"/>
    </bean>
    <!-- spring和MyBatis整合，可以省略mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--设置数据源,这里使用dbcp的数据库连接池-->
      <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis/configuration.xml"/>
        <property name="mapperLocations" value="classpath:mybatis/sqlMap/*.xml"/>
    </bean>

    <!--配置事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--配置事务模板-->
    <bean id="transactionTemplate"
          class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionManager"/>
    </bean>




    <!--好处是不需要在业务逻辑中管理bean之间的关系,交给容器管理,如果不使用自动注入,那么是由自己在容器启动时就配置好,业务逻辑中只用考虑业务不用考虑每一个bean的关系,而如果是自动装填那就更方便了,我把bean 弄好,你用到啥就去用啥-->
</beans>